<div style="display:inline-block; vertical-align:top">
  <div style="display:inline-block">
    <div style="margin:10px">
      <div style="width:200px; display:inline-block">
        <Die Value="@currentRoll[0]" Id="bobDie1" @bind-IsSelected="@diceSelected[0]" IsDisabled="true" />
        <Die Value="@currentRoll[1]" Id="bobDie2" @bind-IsSelected="@diceSelected[1]" IsDisabled="true" />
        <Die Value="@currentRoll[2]" Id="bobDie3" @bind-IsSelected="@diceSelected[2]" IsDisabled="true" />
        <Die Value="@currentRoll[3]" Id="bobDie4" @bind-IsSelected="@diceSelected[3]" IsDisabled="true" />
        <Die Value="@currentRoll[4]" Id="bobDie5" @bind-IsSelected="@diceSelected[4]" IsDisabled="true" />
      </div>
    </div>
    <div style="margin:10px">
      <button @onclick="Next" disabled="@isNextDisabled">Next</button>
    </div>
    <div style="margin:10px">
      Score: @game.Score
    </div>
    <div style="margin:10px">
      @if (@game.AllowedCombinationTypes.Any())
      {
        <p>Combinations left:</p>

        <br />
        @foreach (CombinationTypes allowedCombination in @game.AllowedCombinationTypes)
        {
          @allowedCombination

          <br />
        }
      }
      else
      {
        <p>Game over!</p>
      }
    </div>
  </div>
  <div style="display:inline-block; vertical-align:top">
    Bob: <br />
    @if (isWaiting)
    {
      <p>Thinking...</p>
    }
    else
    {
      <p>Waiting for yout input</p>
    }
    @foreach (var message in @messages)
    {
      <p>@message<br /></p>
    }
  </div>
</div>

@code {
  [Parameter]
  public bool IsActive { get; set; } = true;
  [Parameter]
  public EventCallback<bool> OnTurnCompleted { get; set; }

  protected override async Task OnParametersSetAsync()
  {
    if (IsActive && isActive != IsActive)
    {
      await Next();
    }
    isActive = IsActive;
  }

  private bool isActive;

  private DiceRollDistinct currentRoll = new DiceRollDistinct(new[] { 2, 2, 4, 4, 6 });

  private GameOfSchool game = new GameOfSchool(new PrecomputedBob());

  private bool[] diceSelected = new[] { false, false, false, false, false };

  private bool isNextDisabled => !IsActive || isWaiting;

  private bool isWaiting { get; set; } = false;

  private List<string> messages = new List<string>();

  private void ResetRolls()
  {
    for (int i = 0; i < DiceRoll.MaxDiceAmount; ++i)
    {
      diceSelected[i] = false;
    }
  }

  protected override void OnInitialized()
  {
    currentRoll = game.GenerateRoll();
  }

  private void AddMessage(string message)
  {
    messages.Add(message);
    StateHasChanged();
  }

  private async Task Next()
  {
    isWaiting = true;
    messages.Clear();
    bool hasError = false;
    while (!game.IsTurnOver && !hasError)
    {
      string newMessage = $"For {game.CurrentRoll} I decide to ";

      DateTime startTime = DateTime.UtcNow;
      Decision decision = game.GenerateAndApplyDecision();
      AddMessage($"Decision took '{DateTime.UtcNow - startTime}'");

      newMessage += $" {decision}.";

      AddMessage(newMessage);

      if (decision is Reroll)
      {
        game.GenerateAndApplyReroll();
      }
    }

    if (!game.IsGameOver)
    {
      currentRoll = game.GenerateRoll();
    }

    isWaiting = false;
    await OnTurnCompleted.InvokeAsync();
  }
}