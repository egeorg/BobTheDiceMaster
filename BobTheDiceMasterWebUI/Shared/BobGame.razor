<div style="display:inline">
    <div style="margin:10px">
        <div style="width:200px; display:inline-block">
            <Die Value="@currentRoll[0]" Id="bobDie1" @bind-IsSelected="@diceSelected[0]" IsDisabled="true" />
            <Die Value="@currentRoll[1]" Id="bobDie2" @bind-IsSelected="@diceSelected[1]" IsDisabled="true" />
            <Die Value="@currentRoll[2]" Id="bobDie3" @bind-IsSelected="@diceSelected[2]" IsDisabled="true" />
            <Die Value="@currentRoll[3]" Id="bobDie4" @bind-IsSelected="@diceSelected[3]" IsDisabled="true" />
            <Die Value="@currentRoll[4]" Id="bobDie5" @bind-IsSelected="@diceSelected[4]" IsDisabled="true" />
        </div>
    </div>
    <div style="margin:10px">
        Bob: <br />
        @foreach (var message in @messages)
        {
            <p>@message<br /></p>
        }
        <button @onclick="Next">Next</button>
    </div>
    <div style="margin:10px">
        Score: @game.Score
    </div>
    <div style="margin:10px">
        @if (@game.AllowedCombinationTypes.Any())
        {
            <p>Combinations left:</p><br />
            @foreach (CombinationTypes allowedCombination in @game.AllowedCombinationTypes)
            {
                @allowedCombination<br />
            }
        }
        else
        {
            <p>Game over!</p>
        }
    </div>
</div>

@code {
  private DiceRollDistinct currentRoll = new DiceRollDistinct(new[] { 2, 2, 4, 4, 6 });

  private GameOfSchool game = new GameOfSchool(new VerboseBruteForceBob());

  public bool[] diceSelected = new[] { false, false, false, false, false };

  private static D6 d6 = new D6(1);

  private List<string> messages = new List<string>();

  private Decision latestDecision;

  private void ResetRolls()
  {
      for (int i = 0; i < DiceRoll.MaxDiceAmount; ++i)
      {
          diceSelected[i] = false;
      }
  }

  protected override void OnInitialized()
  {
      currentRoll = game.GenerateRoll();
  }

  public void Next()
  {
      List<string> newMessages = new List<string>();
      while (!game.IsTurnOver)
      {
          string newMessage = $"For {game.CurrentRoll} I decide to ";

          Decision decision = game.GenerateAndApplyDecision();

          newMessage += $" {decision}.";

          newMessages.Add(newMessage);

          if (decision is Reroll)
          {
              game.GenerateAndApplyReroll();
          }
      }
      messages = newMessages;

      if (!game.IsGameOver)
      {
          currentRoll = game.GenerateRoll();
      }
  }
}