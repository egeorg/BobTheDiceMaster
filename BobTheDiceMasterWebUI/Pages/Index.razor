@page "/"

<body>
    <div style="margin:10px">
        <div style="width:200px; display:inline-block">
            <Die Value="@currentRoll[0]" Id="die1" @bind-IsSelected="@diceSelected[0]" />
            <Die Value="@currentRoll[1]" Id="die2" @bind-IsSelected="@diceSelected[1]" />
            <Die Value="@currentRoll[2]" Id="die3" @bind-IsSelected="@diceSelected[2]" />
            <Die Value="@currentRoll[3]" Id="die4" @bind-IsSelected="@diceSelected[3]" />
            <Die Value="@currentRoll[4]" Id="die5" @bind-IsSelected="@diceSelected[4]" />
        </div>
        <div style="display:inline-block">
            <div>
                <button @onclick="@Reroll">Reroll</button>
            </div>
            <div>
                <button @onclick="@Roll">Roll</button>
            </div>
        </div>
    </div>
    <div style="margin:10px">
        <select id="ScoreCombination" style="width:200px" @bind="@CombinationToScore">
            @foreach (CombinationTypes combinationType in @game.ScoreCombinationTypes)
            {
                <option value="@combinationType">@combinationType</option>
            }
        </select>
        <button @onclick="Score">Score</button>
    </div>
    <div style="margin:10px">
        <select id="CrossOutCombination" style="width:200px" @bind="@CombinationToCrossOut">
            @foreach (CombinationTypes combinationType in @game.CrossOutCombinationTypes)
            {
                <option value="@combinationType">@combinationType</option>
            }
        </select>
        <button @onclick="CrossOut">Cross out</button>
    </div>
    <div style="margin:10px">
        Score: @game.Score
        <!--<table>
        <tr><td>Player</td><td>Bob</td><td>Human</td></tr>
        <tr><td>1</td><td>-3</td><td>-</td></tr>
        <tr><td>2</td><td>-</td><td>-</td></tr>
        <tr><td>3</td><td>-</td><td>-</td></tr>
        <tr><td>4</td><td>-</td><td>-</td></tr>
        <tr><td>5</td><td>-10</td><td>-</td></tr>
        <tr><td>6</td><td>-6</td><td>-</td></tr>
        <tr><td>Pair</td><td>-</td><td>-</td></tr>
        <tr><td>Two pairs</td><td>-</td><td>-</td></tr>
        <tr><td>Set</td><td>18</td><td>-</td></tr>
        <tr><td>Full</td><td>28</td><td>-</td></tr>
        <tr><td>Small street</td><td>20</td><td>-</td></tr>
        <tr><td>Big street</td><td>30</td><td>-</td></tr>
        <tr><td>Care</td><td>-</td><td>-</td></tr>
        <tr><td>Poker</td><td>-</td><td>-</td></tr>
        <tr><td>Trash</td><td>-</td><td>-</td></tr>
        <tr><td>Total</td><td>77</td><td>-</td></tr>
    </!--table>-->
    </div>
    <div style="margin:10px">
        Combinations left:<br />
        @foreach(CombinationTypes allowedCombination in @game.AllowedCombinationTypes)
        {
            @allowedCombination<br />
        }
    </div>
</body>

@code {
  private DiceRollDistinct currentRoll = new DiceRollDistinct(new[] { 2, 2, 4, 4, 6 });

  private GameOfSchool game = new GameOfSchool(new VerboseBruteForceBob());

  private string CombinationToScore { get; set; }
  private string CombinationToCrossOut { get; set; }

  public bool[] diceSelected = new[] { false, false, false, false, false };

  private static D6 d6 = new D6(1);

  private void ResetRolls()
  {
      for (int i = 0; i < DiceRoll.MaxDiceAmount; ++i)
      {
          diceSelected[i] = false;
      }
      CombinationToScore = game.ScoreCombinationTypes.FirstOrDefault().ToString();
      CombinationToCrossOut = game.CrossOutCombinationTypes.FirstOrDefault().ToString();
  }

  protected override void OnInitialized()
  {
      currentRoll = game.GenerateRoll();
      //Initialize selected items in combo boxes
      CombinationToScore = game.ScoreCombinationTypes.FirstOrDefault().ToString();
      CombinationToCrossOut = game.CrossOutCombinationTypes.FirstOrDefault().ToString();
  }

  public static void DiceSelectionChanged()
  {
      DiceRoll currentRoll = DiceRoll.GenerateNew(d6);
  }

  public void Roll()
  {
      game.GenerateRoll();
      currentRoll = game.CurrentRoll;
  }

  public void Reroll()
  {
      game.GenerateAndApplyReroll(
        Enumerable.Range(0, DiceRoll.MaxDiceAmount)
          .Where(i => diceSelected[i])
          .ToArray());

      //TODO: do I need a currentRoll local variable ora can I bind to game.CurrentRoll directly?
      currentRoll = game.CurrentRoll;
      //currentRoll.Reroll(
      //  Enumerable.Range(0, DiceRoll.MaxDiceAmount)
      //    .Where(i => diceSelected[i])
      //    .ToArray(),
      //  d6);
  }

  public void Score()
  {
      CombinationTypes combinationToScore =
          (CombinationTypes)Enum.Parse(typeof(CombinationTypes), CombinationToScore);
      game.ApplyDecision(new Score(combinationToScore));
      ResetRolls();
  }

  public void CrossOut()
  {
      CombinationTypes combinationToCrossOut =
          (CombinationTypes)Enum.Parse(typeof(CombinationTypes), CombinationToCrossOut);
      game.ApplyDecision(new CrossOut(combinationToCrossOut));
      ResetRolls();
  }

  //public void Roll()
  //{
  //    int[] diceToReroll = Enumerable.Range(1, DiceRoll.MaxDiceAmount)
  //        .Where(i => diceSelected[i])
  //        .ToArray();

  //    currentRoll.Reroll(diceToReroll, new D6());

  //    for (int i = 0; i < DiceRoll.MaxDiceAmount; ++i)
  //    {
  //        diceValues[i] = currentRoll[i];
  //    }

  //    for (int i = 4; i > 0; --i)
  //    {
  //        int iThDiePlace = rng.Next(0, i);
  //        int tmp = diceValues[i];
  //        diceValues[i] = diceValues[iThDiePlace];
  //        diceValues[iThDiePlace] = tmp;
  //    }
  //}
}
