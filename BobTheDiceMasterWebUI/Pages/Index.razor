@page "/"

<body>
    <div style="margin:10px">
        <div style="width:200px; display:inline-block">
            <Die Value="@currentRoll[0]" Id="die1" @bind-IsSelected="@diceSelected[0]" />
            <Die Value="@currentRoll[1]" Id="die2" @bind-IsSelected="@diceSelected[1]" />
            <Die Value="@currentRoll[2]" Id="die3" @bind-IsSelected="@diceSelected[2]" />
            <Die Value="@currentRoll[3]" Id="die4" @bind-IsSelected="@diceSelected[3]" />
            <Die Value="@currentRoll[4]" Id="die5" @bind-IsSelected="@diceSelected[4]" />
        </div>
        <div style="display:inline-block">
            <div>
                <button @onclick="@Reroll" disabled="@IsRerollDisabled">Reroll</button>
            </div>
            <div>
                <button @onclick="@Roll" disabled="@IsRollDisabled">Roll</button>
            </div>
        </div>
    </div>
    <div style="margin:10px">
        <select id="ScoreCombination" style="width:200px" @bind="@CombinationToScore">
            @foreach (CombinationTypes combinationType in @game.ScoreCombinationTypes)
            {
                <option value="@combinationType">@combinationType</option>
            }
        </select>
        <button @onclick="Score" disabled="@IsScoreDisabled">Score</button>
    </div>
    <div style="margin:10px">
        <select id="CrossOutCombination" style="width:200px" @bind="@CombinationToCrossOut">
            @foreach (CombinationTypes combinationType in @game.CrossOutCombinationTypes)
            {
                <option value="@combinationType">@combinationType</option>
            }
        </select>
        <button @onclick="CrossOut"  disabled="@IsCrossOutDisabled">Cross out</button>
    </div>
    <div style="margin:10px">
        Score: @game.Score
    </div>
    <div style="margin:10px">
        @if (@game.AllowedCombinationTypes.Any())
        {
            <p>Combinations left:</p><br />
            @foreach (CombinationTypes allowedCombination in @game.AllowedCombinationTypes)
            {
                @allowedCombination<br />
            }
        }
        else
        {
            <p>Game over!</p>
        }
    </div>
</body>

@code {
  private DiceRollDistinct currentRoll = new DiceRollDistinct(new[] { 2, 2, 4, 4, 6 });

  private GameOfSchool game = new GameOfSchool(new VerboseBruteForceBob());

  private string CombinationToScore { get; set; }
  private string CombinationToCrossOut { get; set; }
  private bool IsRerollDisabled => game.State != GameOfSchoolState.Rolled
      || game.RollsLeft <= 1
      || !diceSelected.Any(x => x);
  private bool IsRollDisabled => game.State != GameOfSchoolState.Idle;
  private bool IsScoreDisabled => game.State != GameOfSchoolState.Rolled
      || !game.ScoreCombinationTypes.Any();
  private bool IsCrossOutDisabled => game.State != GameOfSchoolState.Rolled
      || !game.CrossOutCombinationTypes.Any();

  public bool[] diceSelected = new[] { false, false, false, false, false };

  private static D6 d6 = new D6(1);

  private void ResetRolls()
  {
      for (int i = 0; i < DiceRoll.MaxDiceAmount; ++i)
      {
          diceSelected[i] = false;
      }
      CombinationToScore = game.ScoreCombinationTypes.FirstOrDefault().ToString();
      CombinationToCrossOut = game.CrossOutCombinationTypes.FirstOrDefault().ToString();
  }

  protected override void OnInitialized()
  {
      currentRoll = game.GenerateRoll();
      //Initialize selected items in combo boxes
      CombinationToScore = game.ScoreCombinationTypes.FirstOrDefault().ToString();
      CombinationToCrossOut = game.CrossOutCombinationTypes.FirstOrDefault().ToString();
  }

  public static void DiceSelectionChanged()
  {
      DiceRoll currentRoll = DiceRoll.GenerateNew(d6);
  }

  public void Roll()
  {
      game.GenerateRoll();
      currentRoll = game.CurrentRoll;
  }

  public void Reroll()
  {
      game.GenerateAndApplyReroll(
        Enumerable.Range(0, DiceRoll.MaxDiceAmount)
          .Where(i => diceSelected[i])
          .ToArray());

      //TODO: do I need a currentRoll local variable ora can I bind to game.CurrentRoll directly?
      currentRoll = game.CurrentRoll;
  }

  public void Score()
  {
      CombinationTypes combinationToScore =
          (CombinationTypes)Enum.Parse(typeof(CombinationTypes), CombinationToScore);
      game.ApplyDecision(new Score(combinationToScore));
      ResetRolls();
  }

  public void CrossOut()
  {
      CombinationTypes combinationToCrossOut =
          (CombinationTypes)Enum.Parse(typeof(CombinationTypes), CombinationToCrossOut);
      game.ApplyDecision(new CrossOut(combinationToCrossOut));
      ResetRolls();
  }
}
