namespace BobTheDiceMaster
{
  /// <summary>
  /// A game of school for a single player with decisions as input parameters
  /// and dice values generated by an <see cref="IDie"/> passed to the constructor.
  /// </summary>
  public class GameOfSchoolWithDice : GameOfSchoolBase
  {
    private IDie dice;

    public GameOfSchoolWithDice(IDie dice)
    {
      this.dice = dice;
    }

    /// <summary>
    /// Generate and return a new <see cref="CurrentRoll"/> and
    /// change game state to <see cref="GameOfSchoolState.Rolled"/>.
    /// Only possible in <see cref="GameOfSchoolState.Idle"/> game state.
    /// </summary>
    public DiceRollDistinct GenerateRoll()
    {
      //TODO: add unit tests
      VerifyState(GameOfSchoolState.Idle);

      DiceRollDistinct newRoll = new DiceRollDistinct(
          dice.Roll(DiceRoll.MaxDiceAmount));
      SetCurrentRollProtected(newRoll);

      return newRoll;
    }

    /// <summary>
    /// Score a combination <paramref name="combination"/>.
    /// Only possible in <see cref="GameOfSchoolState.Rolled"/> game state.
    /// </summary>
    public void ScoreCombination(CombinationTypes combination)
    {
      ScoreCombinationProtected(combination);
    }

    /// <summary>
    /// Cross out a combination <paramref name="combination"/>.
    /// Only possible in <see cref="GameOfSchoolState.Rolled"/> game state.
    /// </summary>
    public void CrossOutCombination(CombinationTypes combination)
    {
      CrossOutCombinationProtected(combination);
    }

    /// <summary>
    /// Generate new values for dice at indexes <paramref name="diceIndexes" />.
    /// Only possible in the <see cref="GameOfSchoolState.Rolled"/> game state.
    /// </summary>
    public void RerollDiceAtIndexes(int[] diceIndexes)
    {
      ApplyRerollToDiceAtIndexesProtected(dice.Roll(diceIndexes.Length), diceIndexes);
    }
  }
}
