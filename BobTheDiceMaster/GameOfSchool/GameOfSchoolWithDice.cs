using System.Collections.Generic;
using System.Linq;

namespace BobTheDiceMaster
{
  /// <summary>
  /// A game of school for a single player with decisions as input parameters
  /// and dice values generated by an <see cref="IDie"/> passed to the constructor.
  /// </summary>
  public class GameOfSchoolWithDice : GameOfSchoolBase
  {
    private IDie dice;

    public GameOfSchoolWithDice(IDie dice)
    {
      this.dice = dice;
    }

    /// <summary>
    /// Generate and return a new <see cref="CurrentRoll"/>.
    /// </summary>
    public DiceRollDistinct GenerateRoll()
    {
      DiceRollDistinct newRoll =
        new DiceRollDistinct(
          dice.Roll(DiceRoll.MaxDiceAmount));
      SetCurrentRollProtected(newRoll);
      return newRoll;
    }

    /// <summary>
    /// Apply a decision passed as an argument.
    /// </summary>
    public void ApplyDecision(Decision decision)
    {
      ApplyDecisionProtected(decision);
    }

    /// <summary>
    /// Generate a reroll result and apply it to a <see cref="CurrentRoll"/>.
    /// Dice to be rerolled has to be set earlier by
    /// a <see cref="ApplyDecision(Decision)"/> method with an argument of type <see cref="Reroll"/>.
    /// </summary>
    public void GenerateAndApplyReroll()
    {
      VerifyState(GameOfSchoolState.Rolled);
      currentRoll = currentRoll.RerollIndexes(diceIndexesToReroll, dice);
    }

    /// <summary>
    /// Shorcut, it's basically the same as calling
    /// <see cref="ApplyDecision(Decision)"/> with a <see cref="Reroll"/>
    /// argument and then <see cref="GenerateAndApplyReroll"/>.
    /// Only possible in <see cref="GameOfSchoolState.Rolled"/> game state.
    /// </summary>
    public void GenerateAndApplyReroll(int[] diceIndexesToReroll)
    {
      DecrementRerollsLeftAndThrowIfNoRerollsLeft();
      this.diceIndexesToReroll = diceIndexesToReroll;
      GenerateAndApplyReroll();
    }
  }
}
