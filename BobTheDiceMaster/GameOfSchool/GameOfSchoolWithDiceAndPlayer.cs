namespace BobTheDiceMaster
{
  /// <summary>
  /// A game of school for a single player with decisions generated by
  /// an <see cref="IPlayer"/> passed to the constructor and dice values
  /// generated by an <see cref="IDie"/> passed to the constructor.
  /// </summary>
  public class GameOfSchoolWithDiceAndPlayer : GameOfSchoolBase
  {
    private IDie dice;
    private IPlayer aiPlayer;

    public GameOfSchoolWithDiceAndPlayer(IDie dice, IPlayer aiPlayer)
    {
      this.dice = dice;
      this.aiPlayer = aiPlayer;
    }

    /// <summary>
    /// Generate and return a new <see cref="CurrentRoll"/>.
    /// </summary>
    public DiceRollDistinct GenerateRoll()
    {
      DiceRollDistinct newRoll = new DiceRollDistinct(
          dice.Roll(DiceRoll.MaxDiceAmount));
      SetCurrentRollProtected(newRoll);

      return newRoll;
    }

    /// <summary>
    /// Generate a reroll result and apply it to a <see cref="CurrentRoll"/>.
    /// Dice to be rerolled has to be set earlier by
    /// a <see cref="GenerateAndApplyDecision"/> method.
    /// </summary>
    public void GenerateAndApplyReroll()
    {
      VerifyState(GameOfSchoolState.Rolled);
      currentRoll = currentRoll.RerollIndexes(diceIndexesToReroll, dice);
    }

    /// <summary>
    /// Generate a decision using a player passed through a constructor
    /// and apply it.
    /// Only possible in <see cref="GameOfSchoolState.Rolled"/> game state.
    /// </summary>
    public Decision GenerateAndApplyDecision()
    {
      VerifyState(GameOfSchoolState.Rolled);
      Decision decision = aiPlayer.DecideOnRoll(
        allowedCombinationTypes, currentRoll.Roll, rerollsLeft);
      ApplyDecisionProtected(decision);
      return decision;
    }
  }
}
